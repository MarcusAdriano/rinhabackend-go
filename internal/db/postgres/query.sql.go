// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countPessoas = `-- name: CountPessoas :one
SELECT COUNT(*)
FROM pessoas
`

func (q *Queries) CountPessoas(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPessoas)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPessoa = `-- name: CreatePessoa :one
INSERT INTO pessoas (id, nome, apelido, stack)
VALUES ($1, $2, $3, $4)
RETURNING id, nome, apelido, stack
`

type CreatePessoaParams struct {
	ID      uuid.UUID
	Nome    string
	Apelido string
	Stack   pgtype.Text
}

func (q *Queries) CreatePessoa(ctx context.Context, arg CreatePessoaParams) (Pessoa, error) {
	row := q.db.QueryRow(ctx, createPessoa,
		arg.ID,
		arg.Nome,
		arg.Apelido,
		arg.Stack,
	)
	var i Pessoa
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Apelido,
		&i.Stack,
	)
	return i, err
}

const getPessoa = `-- name: GetPessoa :one
SELECT id, nome, apelido, stack
FROM pessoas
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPessoa(ctx context.Context, id uuid.UUID) (Pessoa, error) {
	row := q.db.QueryRow(ctx, getPessoa, id)
	var i Pessoa
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Apelido,
		&i.Stack,
	)
	return i, err
}

const searchPessoas = `-- name: SearchPessoas :many
SELECT id, nome, apelido, stack
FROM pessoas
WHERE nome ILIKE $1 OR apelido ILIKE $1 OR stack ILIKE $1
`

func (q *Queries) SearchPessoas(ctx context.Context, nome string) ([]Pessoa, error) {
	rows, err := q.db.Query(ctx, searchPessoas, nome)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pessoa
	for rows.Next() {
		var i Pessoa
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Apelido,
			&i.Stack,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
